"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AuthorizeFileUploadRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            product: 'Product',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            product: 'string',
            regionId: 'string',
        };
    }
}
exports.AuthorizeFileUploadRequest = AuthorizeFileUploadRequest;
class AuthorizeFileUploadResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'AccessKeyId',
            bucket: 'Bucket',
            encodedPolicy: 'EncodedPolicy',
            endpoint: 'Endpoint',
            objectKey: 'ObjectKey',
            requestId: 'RequestId',
            signature: 'Signature',
            useAccelerate: 'UseAccelerate',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            bucket: 'string',
            encodedPolicy: 'string',
            endpoint: 'string',
            objectKey: 'string',
            requestId: 'string',
            signature: 'string',
            useAccelerate: 'boolean',
        };
    }
}
exports.AuthorizeFileUploadResponseBody = AuthorizeFileUploadResponseBody;
class AuthorizeFileUploadResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AuthorizeFileUploadResponseBody,
        };
    }
}
exports.AuthorizeFileUploadResponse = AuthorizeFileUploadResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("openplatform", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async authorizeFileUploadWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AuthorizeFileUpload",
            version: "2019-12-19",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AuthorizeFileUploadResponse({}));
    }
    async authorizeFileUpload(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.authorizeFileUploadWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map