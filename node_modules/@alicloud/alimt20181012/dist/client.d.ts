/// <reference types="node" />
/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateAsyncTranslateRequest extends $tea.Model {
    apiType?: string;
    formatType?: string;
    scene?: string;
    sourceLanguage?: string;
    sourceText?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAsyncTranslateResponseBody extends $tea.Model {
    code?: number;
    data?: CreateAsyncTranslateResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAsyncTranslateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAsyncTranslateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDocTranslateTaskRequest extends $tea.Model {
    callbackUrl?: string;
    clientToken?: string;
    fileUrl?: string;
    scene?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDocTranslateTaskAdvanceRequest extends $tea.Model {
    callbackUrl?: string;
    clientToken?: string;
    fileUrlObject?: Readable;
    scene?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDocTranslateTaskResponseBody extends $tea.Model {
    requestId?: string;
    status?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDocTranslateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDocTranslateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateImageTranslateTaskRequest extends $tea.Model {
    clientToken?: string;
    extra?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    urlList?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateImageTranslateTaskResponseBody extends $tea.Model {
    code?: number;
    data?: CreateImageTranslateTaskResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateImageTranslateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateImageTranslateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTranslateRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTranslateResponseBody extends $tea.Model {
    code?: number;
    data?: GetAsyncTranslateResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTranslateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAsyncTranslateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBatchTranslateRequest extends $tea.Model {
    apiType?: string;
    formatType?: string;
    scene?: string;
    sourceLanguage?: string;
    sourceText?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBatchTranslateResponseBody extends $tea.Model {
    code?: number;
    message?: string;
    requestId?: string;
    translatedList?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBatchTranslateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBatchTranslateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBatchTranslateByVPCRequest extends $tea.Model {
    apiType?: string;
    formatType?: string;
    scene?: string;
    sourceLanguage?: string;
    sourceText?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBatchTranslateByVPCResponseBody extends $tea.Model {
    code?: number;
    message?: string;
    requestId?: string;
    translatedList?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBatchTranslateByVPCResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBatchTranslateByVPCResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDetectLanguageRequest extends $tea.Model {
    sourceText?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDetectLanguageResponseBody extends $tea.Model {
    detectedLanguage?: string;
    languageProbabilities?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDetectLanguageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDetectLanguageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocTranslateTaskRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocTranslateTaskResponseBody extends $tea.Model {
    pageCount?: number;
    requestId?: string;
    status?: string;
    taskId?: string;
    translateErrorCode?: string;
    translateErrorMessage?: string;
    translateFileUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocTranslateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDocTranslateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageDiagnoseRequest extends $tea.Model {
    extra?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageDiagnoseResponseBody extends $tea.Model {
    code?: number;
    data?: GetImageDiagnoseResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageDiagnoseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetImageDiagnoseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateRequest extends $tea.Model {
    extra?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateResponseBody extends $tea.Model {
    code?: number;
    data?: GetImageTranslateResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetImageTranslateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateTaskRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateTaskResponseBody extends $tea.Model {
    code?: number;
    data?: GetImageTranslateTaskResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetImageTranslateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleDiagnoseRequest extends $tea.Model {
    categoryId?: string;
    extra?: string;
    language?: string;
    platform?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleDiagnoseResponseBody extends $tea.Model {
    code?: number;
    data?: GetTitleDiagnoseResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleDiagnoseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTitleDiagnoseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleGenerateRequest extends $tea.Model {
    attributes?: string;
    categoryId?: string;
    extra?: string;
    hotWords?: string;
    language?: string;
    platform?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleGenerateResponseBody extends $tea.Model {
    code?: number;
    data?: GetTitleGenerateResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleGenerateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTitleGenerateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleIntelligenceRequest extends $tea.Model {
    catLevelThreeId?: number;
    catLevelTwoId?: number;
    extra?: string;
    keywords?: string;
    platform?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleIntelligenceResponseBody extends $tea.Model {
    code?: number;
    data?: GetTitleIntelligenceResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleIntelligenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTitleIntelligenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateImageBatchResultRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateImageBatchResultResponseBody extends $tea.Model {
    code?: number;
    data?: GetTranslateImageBatchResultResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateImageBatchResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTranslateImageBatchResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateReportRequest extends $tea.Model {
    apiName?: string;
    beginTime?: string;
    endTime?: string;
    group?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateReportResponseBody extends $tea.Model {
    code?: number;
    data?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateReportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTranslateReportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAlimtServiceRequest extends $tea.Model {
    ownerId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAlimtServiceResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAlimtServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenAlimtServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateRequest extends $tea.Model {
    context?: string;
    formatType?: string;
    scene?: string;
    sourceLanguage?: string;
    sourceText?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateResponseBody extends $tea.Model {
    code?: number;
    data?: TranslateResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateCertificateRequest extends $tea.Model {
    certificateType?: string;
    imageUrl?: string;
    resultType?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateCertificateAdvanceRequest extends $tea.Model {
    certificateType?: string;
    imageUrlObject?: Readable;
    resultType?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateCertificateResponseBody extends $tea.Model {
    data?: TranslateCertificateResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateCertificateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateCertificateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateECommerceRequest extends $tea.Model {
    context?: string;
    formatType?: string;
    scene?: string;
    sourceLanguage?: string;
    sourceText?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateECommerceResponseBody extends $tea.Model {
    code?: number;
    data?: TranslateECommerceResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateECommerceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateECommerceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralRequest extends $tea.Model {
    context?: string;
    formatType?: string;
    scene?: string;
    sourceLanguage?: string;
    sourceText?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralResponseBody extends $tea.Model {
    code?: number;
    data?: TranslateGeneralResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralVpcRequest extends $tea.Model {
    context?: string;
    formatType?: string;
    scene?: string;
    sourceLanguage?: string;
    sourceText?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralVpcResponseBody extends $tea.Model {
    code?: number;
    data?: TranslateGeneralVpcResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralVpcResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateGeneralVpcResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageRequest extends $tea.Model {
    ext?: string;
    field?: string;
    imageBase64?: string;
    imageUrl?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageResponseBody extends $tea.Model {
    code?: number;
    data?: TranslateImageResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateImageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageBatchRequest extends $tea.Model {
    customTaskId?: string;
    ext?: string;
    field?: string;
    imageUrls?: string;
    sourceLanguage?: string;
    targetLanguage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageBatchResponseBody extends $tea.Model {
    code?: number;
    data?: TranslateImageBatchResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageBatchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateImageBatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAsyncTranslateResponseBodyData extends $tea.Model {
    jobId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateImageTranslateTaskResponseBodyData extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTranslateResponseBodyData extends $tea.Model {
    detectedLanguage?: string;
    status?: string;
    translatedText?: string;
    wordCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageDiagnoseResponseBodyData extends $tea.Model {
    language?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateResponseBodyData extends $tea.Model {
    orc?: string;
    pictureEditor?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImageTranslateTaskResponseBodyData extends $tea.Model {
    imageData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleDiagnoseResponseBodyData extends $tea.Model {
    allUppercaseWords?: string;
    containCoreClasses?: string;
    disableWords?: string;
    duplicateWords?: string;
    languageQualityScore?: string;
    noFirstUppercaseList?: string;
    overLengthLimit?: string;
    totalScore?: string;
    wordCount?: string;
    wordSpelledCorrectError?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleGenerateResponseBodyData extends $tea.Model {
    titles?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTitleIntelligenceResponseBodyData extends $tea.Model {
    titles?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateImageBatchResultResponseBodyDataResult extends $tea.Model {
    code?: number;
    finalImageUrl?: string;
    inPaintingUrl?: string;
    message?: string;
    sourceImageUrl?: string;
    success?: boolean;
    templateJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateImageBatchResultResponseBodyData extends $tea.Model {
    result?: GetTranslateImageBatchResultResponseBodyDataResult[];
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateResponseBodyData extends $tea.Model {
    detectedLanguage?: string;
    translated?: string;
    wordCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateCertificateResponseBodyDataTranslatedValues extends $tea.Model {
    key?: string;
    keyTranslation?: string;
    value?: string;
    valueTranslation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateCertificateResponseBodyData extends $tea.Model {
    translatedValues?: TranslateCertificateResponseBodyDataTranslatedValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateECommerceResponseBodyData extends $tea.Model {
    detectedLanguage?: string;
    translated?: string;
    wordCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralResponseBodyData extends $tea.Model {
    detectedLanguage?: string;
    translated?: string;
    wordCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateGeneralVpcResponseBodyData extends $tea.Model {
    detectedLanguage?: string;
    translated?: string;
    wordCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageResponseBodyData extends $tea.Model {
    finalImageUrl?: string;
    inPaintingUrl?: string;
    templateJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateImageBatchResponseBodyData extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request CreateAsyncTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAsyncTranslateResponse
     */
    createAsyncTranslateWithOptions(request: CreateAsyncTranslateRequest, runtime: $Util.RuntimeOptions): Promise<CreateAsyncTranslateResponse>;
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request CreateAsyncTranslateRequest
     * @return CreateAsyncTranslateResponse
     */
    createAsyncTranslate(request: CreateAsyncTranslateRequest): Promise<CreateAsyncTranslateResponse>;
    /**
     * @param request CreateDocTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDocTranslateTaskResponse
     */
    createDocTranslateTaskWithOptions(request: CreateDocTranslateTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateDocTranslateTaskResponse>;
    /**
     * @param request CreateDocTranslateTaskRequest
     * @return CreateDocTranslateTaskResponse
     */
    createDocTranslateTask(request: CreateDocTranslateTaskRequest): Promise<CreateDocTranslateTaskResponse>;
    createDocTranslateTaskAdvance(request: CreateDocTranslateTaskAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateDocTranslateTaskResponse>;
    /**
     * @param request CreateImageTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateImageTranslateTaskResponse
     */
    createImageTranslateTaskWithOptions(request: CreateImageTranslateTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateImageTranslateTaskResponse>;
    /**
     * @param request CreateImageTranslateTaskRequest
     * @return CreateImageTranslateTaskResponse
     */
    createImageTranslateTask(request: CreateImageTranslateTaskRequest): Promise<CreateImageTranslateTaskResponse>;
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request GetAsyncTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAsyncTranslateResponse
     */
    getAsyncTranslateWithOptions(request: GetAsyncTranslateRequest, runtime: $Util.RuntimeOptions): Promise<GetAsyncTranslateResponse>;
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request GetAsyncTranslateRequest
     * @return GetAsyncTranslateResponse
     */
    getAsyncTranslate(request: GetAsyncTranslateRequest): Promise<GetAsyncTranslateResponse>;
    /**
     * @param request GetBatchTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBatchTranslateResponse
     */
    getBatchTranslateWithOptions(request: GetBatchTranslateRequest, runtime: $Util.RuntimeOptions): Promise<GetBatchTranslateResponse>;
    /**
     * @param request GetBatchTranslateRequest
     * @return GetBatchTranslateResponse
     */
    getBatchTranslate(request: GetBatchTranslateRequest): Promise<GetBatchTranslateResponse>;
    /**
     * @summary GetBatchTranslateByVPC
     *
     * @param request GetBatchTranslateByVPCRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBatchTranslateByVPCResponse
     */
    getBatchTranslateByVPCWithOptions(request: GetBatchTranslateByVPCRequest, runtime: $Util.RuntimeOptions): Promise<GetBatchTranslateByVPCResponse>;
    /**
     * @summary GetBatchTranslateByVPC
     *
     * @param request GetBatchTranslateByVPCRequest
     * @return GetBatchTranslateByVPCResponse
     */
    getBatchTranslateByVPC(request: GetBatchTranslateByVPCRequest): Promise<GetBatchTranslateByVPCResponse>;
    /**
     * @summary 语种识别
     *
     * @param request GetDetectLanguageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDetectLanguageResponse
     */
    getDetectLanguageWithOptions(request: GetDetectLanguageRequest, runtime: $Util.RuntimeOptions): Promise<GetDetectLanguageResponse>;
    /**
     * @summary 语种识别
     *
     * @param request GetDetectLanguageRequest
     * @return GetDetectLanguageResponse
     */
    getDetectLanguage(request: GetDetectLanguageRequest): Promise<GetDetectLanguageResponse>;
    /**
     * @param request GetDocTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDocTranslateTaskResponse
     */
    getDocTranslateTaskWithOptions(request: GetDocTranslateTaskRequest, runtime: $Util.RuntimeOptions): Promise<GetDocTranslateTaskResponse>;
    /**
     * @param request GetDocTranslateTaskRequest
     * @return GetDocTranslateTaskResponse
     */
    getDocTranslateTask(request: GetDocTranslateTaskRequest): Promise<GetDocTranslateTaskResponse>;
    /**
     * @param request GetImageDiagnoseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageDiagnoseResponse
     */
    getImageDiagnoseWithOptions(request: GetImageDiagnoseRequest, runtime: $Util.RuntimeOptions): Promise<GetImageDiagnoseResponse>;
    /**
     * @param request GetImageDiagnoseRequest
     * @return GetImageDiagnoseResponse
     */
    getImageDiagnose(request: GetImageDiagnoseRequest): Promise<GetImageDiagnoseResponse>;
    /**
     * @param request GetImageTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageTranslateResponse
     */
    getImageTranslateWithOptions(request: GetImageTranslateRequest, runtime: $Util.RuntimeOptions): Promise<GetImageTranslateResponse>;
    /**
     * @param request GetImageTranslateRequest
     * @return GetImageTranslateResponse
     */
    getImageTranslate(request: GetImageTranslateRequest): Promise<GetImageTranslateResponse>;
    /**
     * @param request GetImageTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageTranslateTaskResponse
     */
    getImageTranslateTaskWithOptions(request: GetImageTranslateTaskRequest, runtime: $Util.RuntimeOptions): Promise<GetImageTranslateTaskResponse>;
    /**
     * @param request GetImageTranslateTaskRequest
     * @return GetImageTranslateTaskResponse
     */
    getImageTranslateTask(request: GetImageTranslateTaskRequest): Promise<GetImageTranslateTaskResponse>;
    /**
     * @param request GetTitleDiagnoseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTitleDiagnoseResponse
     */
    getTitleDiagnoseWithOptions(request: GetTitleDiagnoseRequest, runtime: $Util.RuntimeOptions): Promise<GetTitleDiagnoseResponse>;
    /**
     * @param request GetTitleDiagnoseRequest
     * @return GetTitleDiagnoseResponse
     */
    getTitleDiagnose(request: GetTitleDiagnoseRequest): Promise<GetTitleDiagnoseResponse>;
    /**
     * @param request GetTitleGenerateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTitleGenerateResponse
     */
    getTitleGenerateWithOptions(request: GetTitleGenerateRequest, runtime: $Util.RuntimeOptions): Promise<GetTitleGenerateResponse>;
    /**
     * @param request GetTitleGenerateRequest
     * @return GetTitleGenerateResponse
     */
    getTitleGenerate(request: GetTitleGenerateRequest): Promise<GetTitleGenerateResponse>;
    /**
     * @param request GetTitleIntelligenceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTitleIntelligenceResponse
     */
    getTitleIntelligenceWithOptions(request: GetTitleIntelligenceRequest, runtime: $Util.RuntimeOptions): Promise<GetTitleIntelligenceResponse>;
    /**
     * @param request GetTitleIntelligenceRequest
     * @return GetTitleIntelligenceResponse
     */
    getTitleIntelligence(request: GetTitleIntelligenceRequest): Promise<GetTitleIntelligenceResponse>;
    /**
     * @summary 获取图片批量翻译结果
     *
     * @param request GetTranslateImageBatchResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTranslateImageBatchResultResponse
     */
    getTranslateImageBatchResultWithOptions(request: GetTranslateImageBatchResultRequest, runtime: $Util.RuntimeOptions): Promise<GetTranslateImageBatchResultResponse>;
    /**
     * @summary 获取图片批量翻译结果
     *
     * @param request GetTranslateImageBatchResultRequest
     * @return GetTranslateImageBatchResultResponse
     */
    getTranslateImageBatchResult(request: GetTranslateImageBatchResultRequest): Promise<GetTranslateImageBatchResultResponse>;
    /**
     * @param request GetTranslateReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTranslateReportResponse
     */
    getTranslateReportWithOptions(request: GetTranslateReportRequest, runtime: $Util.RuntimeOptions): Promise<GetTranslateReportResponse>;
    /**
     * @param request GetTranslateReportRequest
     * @return GetTranslateReportResponse
     */
    getTranslateReport(request: GetTranslateReportRequest): Promise<GetTranslateReportResponse>;
    /**
     * @summary 开通服务
     *
     * @param request OpenAlimtServiceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OpenAlimtServiceResponse
     */
    openAlimtServiceWithOptions(request: OpenAlimtServiceRequest, runtime: $Util.RuntimeOptions): Promise<OpenAlimtServiceResponse>;
    /**
     * @summary 开通服务
     *
     * @param request OpenAlimtServiceRequest
     * @return OpenAlimtServiceResponse
     */
    openAlimtService(request: OpenAlimtServiceRequest): Promise<OpenAlimtServiceResponse>;
    /**
     * @param request TranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateResponse
     */
    translateWithOptions(request: TranslateRequest, runtime: $Util.RuntimeOptions): Promise<TranslateResponse>;
    /**
     * @param request TranslateRequest
     * @return TranslateResponse
     */
    translate(request: TranslateRequest): Promise<TranslateResponse>;
    /**
     * @param request TranslateCertificateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateCertificateResponse
     */
    translateCertificateWithOptions(request: TranslateCertificateRequest, runtime: $Util.RuntimeOptions): Promise<TranslateCertificateResponse>;
    /**
     * @param request TranslateCertificateRequest
     * @return TranslateCertificateResponse
     */
    translateCertificate(request: TranslateCertificateRequest): Promise<TranslateCertificateResponse>;
    translateCertificateAdvance(request: TranslateCertificateAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<TranslateCertificateResponse>;
    /**
     * @deprecated OpenAPI TranslateECommerce is deprecated, please use alimt::2018-10-12::Translate instead.
     *
     * @param request TranslateECommerceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateECommerceResponse
     */
    translateECommerceWithOptions(request: TranslateECommerceRequest, runtime: $Util.RuntimeOptions): Promise<TranslateECommerceResponse>;
    /**
     * @deprecated OpenAPI TranslateECommerce is deprecated, please use alimt::2018-10-12::Translate instead.
     *
     * @param request TranslateECommerceRequest
     * @return TranslateECommerceResponse
     */
    translateECommerce(request: TranslateECommerceRequest): Promise<TranslateECommerceResponse>;
    /**
     * @param request TranslateGeneralRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateGeneralResponse
     */
    translateGeneralWithOptions(request: TranslateGeneralRequest, runtime: $Util.RuntimeOptions): Promise<TranslateGeneralResponse>;
    /**
     * @param request TranslateGeneralRequest
     * @return TranslateGeneralResponse
     */
    translateGeneral(request: TranslateGeneralRequest): Promise<TranslateGeneralResponse>;
    /**
     * @summary TranslateGeneralVpc
     *
     * @param request TranslateGeneralVpcRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateGeneralVpcResponse
     */
    translateGeneralVpcWithOptions(request: TranslateGeneralVpcRequest, runtime: $Util.RuntimeOptions): Promise<TranslateGeneralVpcResponse>;
    /**
     * @summary TranslateGeneralVpc
     *
     * @param request TranslateGeneralVpcRequest
     * @return TranslateGeneralVpcResponse
     */
    translateGeneralVpc(request: TranslateGeneralVpcRequest): Promise<TranslateGeneralVpcResponse>;
    /**
     * @summary 公有云图片翻译产品API
     *
     * @param request TranslateImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateImageResponse
     */
    translateImageWithOptions(request: TranslateImageRequest, runtime: $Util.RuntimeOptions): Promise<TranslateImageResponse>;
    /**
     * @summary 公有云图片翻译产品API
     *
     * @param request TranslateImageRequest
     * @return TranslateImageResponse
     */
    translateImage(request: TranslateImageRequest): Promise<TranslateImageResponse>;
    /**
     * @summary 批量图片翻译接口
     *
     * @param request TranslateImageBatchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateImageBatchResponse
     */
    translateImageBatchWithOptions(request: TranslateImageBatchRequest, runtime: $Util.RuntimeOptions): Promise<TranslateImageBatchResponse>;
    /**
     * @summary 批量图片翻译接口
     *
     * @param request TranslateImageBatchRequest
     * @return TranslateImageBatchResponse
     */
    translateImageBatch(request: TranslateImageBatchRequest): Promise<TranslateImageBatchResponse>;
}
