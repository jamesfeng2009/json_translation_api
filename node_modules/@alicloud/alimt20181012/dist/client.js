"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAlimtServiceRequest = exports.GetTranslateReportResponse = exports.GetTranslateReportResponseBody = exports.GetTranslateReportRequest = exports.GetTranslateImageBatchResultResponse = exports.GetTranslateImageBatchResultResponseBody = exports.GetTranslateImageBatchResultRequest = exports.GetTitleIntelligenceResponse = exports.GetTitleIntelligenceResponseBody = exports.GetTitleIntelligenceRequest = exports.GetTitleGenerateResponse = exports.GetTitleGenerateResponseBody = exports.GetTitleGenerateRequest = exports.GetTitleDiagnoseResponse = exports.GetTitleDiagnoseResponseBody = exports.GetTitleDiagnoseRequest = exports.GetImageTranslateTaskResponse = exports.GetImageTranslateTaskResponseBody = exports.GetImageTranslateTaskRequest = exports.GetImageTranslateResponse = exports.GetImageTranslateResponseBody = exports.GetImageTranslateRequest = exports.GetImageDiagnoseResponse = exports.GetImageDiagnoseResponseBody = exports.GetImageDiagnoseRequest = exports.GetDocTranslateTaskResponse = exports.GetDocTranslateTaskResponseBody = exports.GetDocTranslateTaskRequest = exports.GetDetectLanguageResponse = exports.GetDetectLanguageResponseBody = exports.GetDetectLanguageRequest = exports.GetBatchTranslateByVPCResponse = exports.GetBatchTranslateByVPCResponseBody = exports.GetBatchTranslateByVPCRequest = exports.GetBatchTranslateResponse = exports.GetBatchTranslateResponseBody = exports.GetBatchTranslateRequest = exports.GetAsyncTranslateResponse = exports.GetAsyncTranslateResponseBody = exports.GetAsyncTranslateRequest = exports.CreateImageTranslateTaskResponse = exports.CreateImageTranslateTaskResponseBody = exports.CreateImageTranslateTaskRequest = exports.CreateDocTranslateTaskResponse = exports.CreateDocTranslateTaskResponseBody = exports.CreateDocTranslateTaskAdvanceRequest = exports.CreateDocTranslateTaskRequest = exports.CreateAsyncTranslateResponse = exports.CreateAsyncTranslateResponseBody = exports.CreateAsyncTranslateRequest = void 0;
exports.TranslateImageBatchResponseBodyData = exports.TranslateImageResponseBodyData = exports.TranslateGeneralVpcResponseBodyData = exports.TranslateGeneralResponseBodyData = exports.TranslateECommerceResponseBodyData = exports.TranslateCertificateResponseBodyData = exports.TranslateCertificateResponseBodyDataTranslatedValues = exports.TranslateResponseBodyData = exports.GetTranslateImageBatchResultResponseBodyData = exports.GetTranslateImageBatchResultResponseBodyDataResult = exports.GetTitleIntelligenceResponseBodyData = exports.GetTitleGenerateResponseBodyData = exports.GetTitleDiagnoseResponseBodyData = exports.GetImageTranslateTaskResponseBodyData = exports.GetImageTranslateResponseBodyData = exports.GetImageDiagnoseResponseBodyData = exports.GetAsyncTranslateResponseBodyData = exports.CreateImageTranslateTaskResponseBodyData = exports.CreateAsyncTranslateResponseBodyData = exports.TranslateImageBatchResponse = exports.TranslateImageBatchResponseBody = exports.TranslateImageBatchRequest = exports.TranslateImageResponse = exports.TranslateImageResponseBody = exports.TranslateImageRequest = exports.TranslateGeneralVpcResponse = exports.TranslateGeneralVpcResponseBody = exports.TranslateGeneralVpcRequest = exports.TranslateGeneralResponse = exports.TranslateGeneralResponseBody = exports.TranslateGeneralRequest = exports.TranslateECommerceResponse = exports.TranslateECommerceResponseBody = exports.TranslateECommerceRequest = exports.TranslateCertificateResponse = exports.TranslateCertificateResponseBody = exports.TranslateCertificateAdvanceRequest = exports.TranslateCertificateRequest = exports.TranslateResponse = exports.TranslateResponseBody = exports.TranslateRequest = exports.OpenAlimtServiceResponse = exports.OpenAlimtServiceResponseBody = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const oss_client_1 = __importStar(require("@alicloud/oss-client")), $OSS = oss_client_1;
const openplatform20191219_1 = __importStar(require("@alicloud/openplatform20191219")), $OpenPlatform = openplatform20191219_1;
const $OSSUtil = __importStar(require("@alicloud/oss-util"));
const $FileForm = __importStar(require("@alicloud/tea-fileform"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateAsyncTranslateRequest extends $tea.Model {
    static names() {
        return {
            apiType: 'ApiType',
            formatType: 'FormatType',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            sourceText: 'SourceText',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            apiType: 'string',
            formatType: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            sourceText: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAsyncTranslateRequest = CreateAsyncTranslateRequest;
class CreateAsyncTranslateResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: CreateAsyncTranslateResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAsyncTranslateResponseBody = CreateAsyncTranslateResponseBody;
class CreateAsyncTranslateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAsyncTranslateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAsyncTranslateResponse = CreateAsyncTranslateResponse;
class CreateDocTranslateTaskRequest extends $tea.Model {
    static names() {
        return {
            callbackUrl: 'CallbackUrl',
            clientToken: 'ClientToken',
            fileUrl: 'FileUrl',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            callbackUrl: 'string',
            clientToken: 'string',
            fileUrl: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDocTranslateTaskRequest = CreateDocTranslateTaskRequest;
class CreateDocTranslateTaskAdvanceRequest extends $tea.Model {
    static names() {
        return {
            callbackUrl: 'CallbackUrl',
            clientToken: 'ClientToken',
            fileUrlObject: 'FileUrl',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            callbackUrl: 'string',
            clientToken: 'string',
            fileUrlObject: 'Readable',
            scene: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDocTranslateTaskAdvanceRequest = CreateDocTranslateTaskAdvanceRequest;
class CreateDocTranslateTaskResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'RequestId',
            status: 'Status',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            status: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDocTranslateTaskResponseBody = CreateDocTranslateTaskResponseBody;
class CreateDocTranslateTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateDocTranslateTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDocTranslateTaskResponse = CreateDocTranslateTaskResponse;
class CreateImageTranslateTaskRequest extends $tea.Model {
    static names() {
        return {
            clientToken: 'ClientToken',
            extra: 'Extra',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
            urlList: 'UrlList',
        };
    }
    static types() {
        return {
            clientToken: 'string',
            extra: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
            urlList: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateImageTranslateTaskRequest = CreateImageTranslateTaskRequest;
class CreateImageTranslateTaskResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: CreateImageTranslateTaskResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateImageTranslateTaskResponseBody = CreateImageTranslateTaskResponseBody;
class CreateImageTranslateTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateImageTranslateTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateImageTranslateTaskResponse = CreateImageTranslateTaskResponse;
class GetAsyncTranslateRequest extends $tea.Model {
    static names() {
        return {
            jobId: 'JobId',
        };
    }
    static types() {
        return {
            jobId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAsyncTranslateRequest = GetAsyncTranslateRequest;
class GetAsyncTranslateResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetAsyncTranslateResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAsyncTranslateResponseBody = GetAsyncTranslateResponseBody;
class GetAsyncTranslateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAsyncTranslateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAsyncTranslateResponse = GetAsyncTranslateResponse;
class GetBatchTranslateRequest extends $tea.Model {
    static names() {
        return {
            apiType: 'ApiType',
            formatType: 'FormatType',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            sourceText: 'SourceText',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            apiType: 'string',
            formatType: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            sourceText: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBatchTranslateRequest = GetBatchTranslateRequest;
class GetBatchTranslateResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            translatedList: 'TranslatedList',
        };
    }
    static types() {
        return {
            code: 'number',
            message: 'string',
            requestId: 'string',
            translatedList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBatchTranslateResponseBody = GetBatchTranslateResponseBody;
class GetBatchTranslateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBatchTranslateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBatchTranslateResponse = GetBatchTranslateResponse;
class GetBatchTranslateByVPCRequest extends $tea.Model {
    static names() {
        return {
            apiType: 'ApiType',
            formatType: 'FormatType',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            sourceText: 'SourceText',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            apiType: 'string',
            formatType: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            sourceText: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBatchTranslateByVPCRequest = GetBatchTranslateByVPCRequest;
class GetBatchTranslateByVPCResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            message: 'Message',
            requestId: 'RequestId',
            translatedList: 'TranslatedList',
        };
    }
    static types() {
        return {
            code: 'number',
            message: 'string',
            requestId: 'string',
            translatedList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBatchTranslateByVPCResponseBody = GetBatchTranslateByVPCResponseBody;
class GetBatchTranslateByVPCResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBatchTranslateByVPCResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBatchTranslateByVPCResponse = GetBatchTranslateByVPCResponse;
class GetDetectLanguageRequest extends $tea.Model {
    static names() {
        return {
            sourceText: 'SourceText',
        };
    }
    static types() {
        return {
            sourceText: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDetectLanguageRequest = GetDetectLanguageRequest;
class GetDetectLanguageResponseBody extends $tea.Model {
    static names() {
        return {
            detectedLanguage: 'DetectedLanguage',
            languageProbabilities: 'LanguageProbabilities',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            detectedLanguage: 'string',
            languageProbabilities: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDetectLanguageResponseBody = GetDetectLanguageResponseBody;
class GetDetectLanguageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDetectLanguageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDetectLanguageResponse = GetDetectLanguageResponse;
class GetDocTranslateTaskRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocTranslateTaskRequest = GetDocTranslateTaskRequest;
class GetDocTranslateTaskResponseBody extends $tea.Model {
    static names() {
        return {
            pageCount: 'PageCount',
            requestId: 'RequestId',
            status: 'Status',
            taskId: 'TaskId',
            translateErrorCode: 'TranslateErrorCode',
            translateErrorMessage: 'TranslateErrorMessage',
            translateFileUrl: 'TranslateFileUrl',
        };
    }
    static types() {
        return {
            pageCount: 'number',
            requestId: 'string',
            status: 'string',
            taskId: 'string',
            translateErrorCode: 'string',
            translateErrorMessage: 'string',
            translateFileUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocTranslateTaskResponseBody = GetDocTranslateTaskResponseBody;
class GetDocTranslateTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDocTranslateTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocTranslateTaskResponse = GetDocTranslateTaskResponse;
class GetImageDiagnoseRequest extends $tea.Model {
    static names() {
        return {
            extra: 'Extra',
            url: 'Url',
        };
    }
    static types() {
        return {
            extra: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageDiagnoseRequest = GetImageDiagnoseRequest;
class GetImageDiagnoseResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetImageDiagnoseResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageDiagnoseResponseBody = GetImageDiagnoseResponseBody;
class GetImageDiagnoseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetImageDiagnoseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageDiagnoseResponse = GetImageDiagnoseResponse;
class GetImageTranslateRequest extends $tea.Model {
    static names() {
        return {
            extra: 'Extra',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
            url: 'Url',
        };
    }
    static types() {
        return {
            extra: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateRequest = GetImageTranslateRequest;
class GetImageTranslateResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetImageTranslateResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateResponseBody = GetImageTranslateResponseBody;
class GetImageTranslateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetImageTranslateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateResponse = GetImageTranslateResponse;
class GetImageTranslateTaskRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateTaskRequest = GetImageTranslateTaskRequest;
class GetImageTranslateTaskResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetImageTranslateTaskResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateTaskResponseBody = GetImageTranslateTaskResponseBody;
class GetImageTranslateTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetImageTranslateTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateTaskResponse = GetImageTranslateTaskResponse;
class GetTitleDiagnoseRequest extends $tea.Model {
    static names() {
        return {
            categoryId: 'CategoryId',
            extra: 'Extra',
            language: 'Language',
            platform: 'Platform',
            title: 'Title',
        };
    }
    static types() {
        return {
            categoryId: 'string',
            extra: 'string',
            language: 'string',
            platform: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleDiagnoseRequest = GetTitleDiagnoseRequest;
class GetTitleDiagnoseResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetTitleDiagnoseResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleDiagnoseResponseBody = GetTitleDiagnoseResponseBody;
class GetTitleDiagnoseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTitleDiagnoseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleDiagnoseResponse = GetTitleDiagnoseResponse;
class GetTitleGenerateRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'Attributes',
            categoryId: 'CategoryId',
            extra: 'Extra',
            hotWords: 'HotWords',
            language: 'Language',
            platform: 'Platform',
            title: 'Title',
        };
    }
    static types() {
        return {
            attributes: 'string',
            categoryId: 'string',
            extra: 'string',
            hotWords: 'string',
            language: 'string',
            platform: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleGenerateRequest = GetTitleGenerateRequest;
class GetTitleGenerateResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetTitleGenerateResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleGenerateResponseBody = GetTitleGenerateResponseBody;
class GetTitleGenerateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTitleGenerateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleGenerateResponse = GetTitleGenerateResponse;
class GetTitleIntelligenceRequest extends $tea.Model {
    static names() {
        return {
            catLevelThreeId: 'CatLevelThreeId',
            catLevelTwoId: 'CatLevelTwoId',
            extra: 'Extra',
            keywords: 'Keywords',
            platform: 'Platform',
        };
    }
    static types() {
        return {
            catLevelThreeId: 'number',
            catLevelTwoId: 'number',
            extra: 'string',
            keywords: 'string',
            platform: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleIntelligenceRequest = GetTitleIntelligenceRequest;
class GetTitleIntelligenceResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetTitleIntelligenceResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleIntelligenceResponseBody = GetTitleIntelligenceResponseBody;
class GetTitleIntelligenceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTitleIntelligenceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleIntelligenceResponse = GetTitleIntelligenceResponse;
class GetTranslateImageBatchResultRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateImageBatchResultRequest = GetTranslateImageBatchResultRequest;
class GetTranslateImageBatchResultResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetTranslateImageBatchResultResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateImageBatchResultResponseBody = GetTranslateImageBatchResultResponseBody;
class GetTranslateImageBatchResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTranslateImageBatchResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateImageBatchResultResponse = GetTranslateImageBatchResultResponse;
class GetTranslateReportRequest extends $tea.Model {
    static names() {
        return {
            apiName: 'ApiName',
            beginTime: 'BeginTime',
            endTime: 'EndTime',
            group: 'Group',
        };
    }
    static types() {
        return {
            apiName: 'string',
            beginTime: 'string',
            endTime: 'string',
            group: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateReportRequest = GetTranslateReportRequest;
class GetTranslateReportResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'string',
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateReportResponseBody = GetTranslateReportResponseBody;
class GetTranslateReportResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTranslateReportResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateReportResponse = GetTranslateReportResponse;
class OpenAlimtServiceRequest extends $tea.Model {
    static names() {
        return {
            ownerId: 'OwnerId',
            type: 'Type',
        };
    }
    static types() {
        return {
            ownerId: 'number',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenAlimtServiceRequest = OpenAlimtServiceRequest;
class OpenAlimtServiceResponseBody extends $tea.Model {
    static names() {
        return {
            orderId: 'OrderId',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            orderId: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenAlimtServiceResponseBody = OpenAlimtServiceResponseBody;
class OpenAlimtServiceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenAlimtServiceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenAlimtServiceResponse = OpenAlimtServiceResponse;
class TranslateRequest extends $tea.Model {
    static names() {
        return {
            context: 'Context',
            formatType: 'FormatType',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            sourceText: 'SourceText',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            context: 'string',
            formatType: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            sourceText: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateRequest = TranslateRequest;
class TranslateResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TranslateResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateResponseBody = TranslateResponseBody;
class TranslateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateResponse = TranslateResponse;
class TranslateCertificateRequest extends $tea.Model {
    static names() {
        return {
            certificateType: 'CertificateType',
            imageUrl: 'ImageUrl',
            resultType: 'ResultType',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            certificateType: 'string',
            imageUrl: 'string',
            resultType: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateCertificateRequest = TranslateCertificateRequest;
class TranslateCertificateAdvanceRequest extends $tea.Model {
    static names() {
        return {
            certificateType: 'CertificateType',
            imageUrlObject: 'ImageUrl',
            resultType: 'ResultType',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            certificateType: 'string',
            imageUrlObject: 'Readable',
            resultType: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateCertificateAdvanceRequest = TranslateCertificateAdvanceRequest;
class TranslateCertificateResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'Data',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            data: TranslateCertificateResponseBodyData,
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateCertificateResponseBody = TranslateCertificateResponseBody;
class TranslateCertificateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateCertificateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateCertificateResponse = TranslateCertificateResponse;
class TranslateECommerceRequest extends $tea.Model {
    static names() {
        return {
            context: 'Context',
            formatType: 'FormatType',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            sourceText: 'SourceText',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            context: 'string',
            formatType: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            sourceText: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateECommerceRequest = TranslateECommerceRequest;
class TranslateECommerceResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TranslateECommerceResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateECommerceResponseBody = TranslateECommerceResponseBody;
class TranslateECommerceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateECommerceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateECommerceResponse = TranslateECommerceResponse;
class TranslateGeneralRequest extends $tea.Model {
    static names() {
        return {
            context: 'Context',
            formatType: 'FormatType',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            sourceText: 'SourceText',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            context: 'string',
            formatType: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            sourceText: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralRequest = TranslateGeneralRequest;
class TranslateGeneralResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TranslateGeneralResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralResponseBody = TranslateGeneralResponseBody;
class TranslateGeneralResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateGeneralResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralResponse = TranslateGeneralResponse;
class TranslateGeneralVpcRequest extends $tea.Model {
    static names() {
        return {
            context: 'Context',
            formatType: 'FormatType',
            scene: 'Scene',
            sourceLanguage: 'SourceLanguage',
            sourceText: 'SourceText',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            context: 'string',
            formatType: 'string',
            scene: 'string',
            sourceLanguage: 'string',
            sourceText: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralVpcRequest = TranslateGeneralVpcRequest;
class TranslateGeneralVpcResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TranslateGeneralVpcResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralVpcResponseBody = TranslateGeneralVpcResponseBody;
class TranslateGeneralVpcResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateGeneralVpcResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralVpcResponse = TranslateGeneralVpcResponse;
class TranslateImageRequest extends $tea.Model {
    static names() {
        return {
            ext: 'Ext',
            field: 'Field',
            imageBase64: 'ImageBase64',
            imageUrl: 'ImageUrl',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            ext: 'string',
            field: 'string',
            imageBase64: 'string',
            imageUrl: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageRequest = TranslateImageRequest;
class TranslateImageResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TranslateImageResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageResponseBody = TranslateImageResponseBody;
class TranslateImageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateImageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageResponse = TranslateImageResponse;
class TranslateImageBatchRequest extends $tea.Model {
    static names() {
        return {
            customTaskId: 'CustomTaskId',
            ext: 'Ext',
            field: 'Field',
            imageUrls: 'ImageUrls',
            sourceLanguage: 'SourceLanguage',
            targetLanguage: 'TargetLanguage',
        };
    }
    static types() {
        return {
            customTaskId: 'string',
            ext: 'string',
            field: 'string',
            imageUrls: 'string',
            sourceLanguage: 'string',
            targetLanguage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageBatchRequest = TranslateImageBatchRequest;
class TranslateImageBatchResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            data: 'Data',
            message: 'Message',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TranslateImageBatchResponseBodyData,
            message: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageBatchResponseBody = TranslateImageBatchResponseBody;
class TranslateImageBatchResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateImageBatchResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageBatchResponse = TranslateImageBatchResponse;
class CreateAsyncTranslateResponseBodyData extends $tea.Model {
    static names() {
        return {
            jobId: 'JobId',
            status: 'Status',
        };
    }
    static types() {
        return {
            jobId: 'string',
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAsyncTranslateResponseBodyData = CreateAsyncTranslateResponseBodyData;
class CreateImageTranslateTaskResponseBodyData extends $tea.Model {
    static names() {
        return {
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateImageTranslateTaskResponseBodyData = CreateImageTranslateTaskResponseBodyData;
class GetAsyncTranslateResponseBodyData extends $tea.Model {
    static names() {
        return {
            detectedLanguage: 'DetectedLanguage',
            status: 'Status',
            translatedText: 'TranslatedText',
            wordCount: 'WordCount',
        };
    }
    static types() {
        return {
            detectedLanguage: 'string',
            status: 'string',
            translatedText: 'string',
            wordCount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAsyncTranslateResponseBodyData = GetAsyncTranslateResponseBodyData;
class GetImageDiagnoseResponseBodyData extends $tea.Model {
    static names() {
        return {
            language: 'Language',
        };
    }
    static types() {
        return {
            language: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageDiagnoseResponseBodyData = GetImageDiagnoseResponseBodyData;
class GetImageTranslateResponseBodyData extends $tea.Model {
    static names() {
        return {
            orc: 'Orc',
            pictureEditor: 'PictureEditor',
            url: 'Url',
        };
    }
    static types() {
        return {
            orc: 'string',
            pictureEditor: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateResponseBodyData = GetImageTranslateResponseBodyData;
class GetImageTranslateTaskResponseBodyData extends $tea.Model {
    static names() {
        return {
            imageData: 'ImageData',
        };
    }
    static types() {
        return {
            imageData: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTranslateTaskResponseBodyData = GetImageTranslateTaskResponseBodyData;
class GetTitleDiagnoseResponseBodyData extends $tea.Model {
    static names() {
        return {
            allUppercaseWords: 'AllUppercaseWords',
            containCoreClasses: 'ContainCoreClasses',
            disableWords: 'DisableWords',
            duplicateWords: 'DuplicateWords',
            languageQualityScore: 'LanguageQualityScore',
            noFirstUppercaseList: 'NoFirstUppercaseList',
            overLengthLimit: 'OverLengthLimit',
            totalScore: 'TotalScore',
            wordCount: 'WordCount',
            wordSpelledCorrectError: 'WordSpelledCorrectError',
        };
    }
    static types() {
        return {
            allUppercaseWords: 'string',
            containCoreClasses: 'string',
            disableWords: 'string',
            duplicateWords: 'string',
            languageQualityScore: 'string',
            noFirstUppercaseList: 'string',
            overLengthLimit: 'string',
            totalScore: 'string',
            wordCount: 'string',
            wordSpelledCorrectError: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleDiagnoseResponseBodyData = GetTitleDiagnoseResponseBodyData;
class GetTitleGenerateResponseBodyData extends $tea.Model {
    static names() {
        return {
            titles: 'Titles',
        };
    }
    static types() {
        return {
            titles: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleGenerateResponseBodyData = GetTitleGenerateResponseBodyData;
class GetTitleIntelligenceResponseBodyData extends $tea.Model {
    static names() {
        return {
            titles: 'Titles',
        };
    }
    static types() {
        return {
            titles: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTitleIntelligenceResponseBodyData = GetTitleIntelligenceResponseBodyData;
class GetTranslateImageBatchResultResponseBodyDataResult extends $tea.Model {
    static names() {
        return {
            code: 'Code',
            finalImageUrl: 'FinalImageUrl',
            inPaintingUrl: 'InPaintingUrl',
            message: 'Message',
            sourceImageUrl: 'SourceImageUrl',
            success: 'Success',
            templateJson: 'TemplateJson',
        };
    }
    static types() {
        return {
            code: 'number',
            finalImageUrl: 'string',
            inPaintingUrl: 'string',
            message: 'string',
            sourceImageUrl: 'string',
            success: 'boolean',
            templateJson: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateImageBatchResultResponseBodyDataResult = GetTranslateImageBatchResultResponseBodyDataResult;
class GetTranslateImageBatchResultResponseBodyData extends $tea.Model {
    static names() {
        return {
            result: 'Result',
            status: 'Status',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetTranslateImageBatchResultResponseBodyDataResult },
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTranslateImageBatchResultResponseBodyData = GetTranslateImageBatchResultResponseBodyData;
class TranslateResponseBodyData extends $tea.Model {
    static names() {
        return {
            detectedLanguage: 'DetectedLanguage',
            translated: 'Translated',
            wordCount: 'WordCount',
        };
    }
    static types() {
        return {
            detectedLanguage: 'string',
            translated: 'string',
            wordCount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateResponseBodyData = TranslateResponseBodyData;
class TranslateCertificateResponseBodyDataTranslatedValues extends $tea.Model {
    static names() {
        return {
            key: 'Key',
            keyTranslation: 'KeyTranslation',
            value: 'Value',
            valueTranslation: 'ValueTranslation',
        };
    }
    static types() {
        return {
            key: 'string',
            keyTranslation: 'string',
            value: 'string',
            valueTranslation: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateCertificateResponseBodyDataTranslatedValues = TranslateCertificateResponseBodyDataTranslatedValues;
class TranslateCertificateResponseBodyData extends $tea.Model {
    static names() {
        return {
            translatedValues: 'TranslatedValues',
        };
    }
    static types() {
        return {
            translatedValues: { 'type': 'array', 'itemType': TranslateCertificateResponseBodyDataTranslatedValues },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateCertificateResponseBodyData = TranslateCertificateResponseBodyData;
class TranslateECommerceResponseBodyData extends $tea.Model {
    static names() {
        return {
            detectedLanguage: 'DetectedLanguage',
            translated: 'Translated',
            wordCount: 'WordCount',
        };
    }
    static types() {
        return {
            detectedLanguage: 'string',
            translated: 'string',
            wordCount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateECommerceResponseBodyData = TranslateECommerceResponseBodyData;
class TranslateGeneralResponseBodyData extends $tea.Model {
    static names() {
        return {
            detectedLanguage: 'DetectedLanguage',
            translated: 'Translated',
            wordCount: 'WordCount',
        };
    }
    static types() {
        return {
            detectedLanguage: 'string',
            translated: 'string',
            wordCount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralResponseBodyData = TranslateGeneralResponseBodyData;
class TranslateGeneralVpcResponseBodyData extends $tea.Model {
    static names() {
        return {
            detectedLanguage: 'DetectedLanguage',
            translated: 'Translated',
            wordCount: 'WordCount',
        };
    }
    static types() {
        return {
            detectedLanguage: 'string',
            translated: 'string',
            wordCount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateGeneralVpcResponseBodyData = TranslateGeneralVpcResponseBodyData;
class TranslateImageResponseBodyData extends $tea.Model {
    static names() {
        return {
            finalImageUrl: 'FinalImageUrl',
            inPaintingUrl: 'InPaintingUrl',
            templateJson: 'TemplateJson',
        };
    }
    static types() {
        return {
            finalImageUrl: 'string',
            inPaintingUrl: 'string',
            templateJson: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageResponseBodyData = TranslateImageResponseBodyData;
class TranslateImageBatchResponseBodyData extends $tea.Model {
    static names() {
        return {
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TranslateImageBatchResponseBodyData = TranslateImageBatchResponseBodyData;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._signatureAlgorithm = "v2";
        this._endpointRule = "regional";
        this._endpointMap = {
            'cn-hangzhou': "mt.cn-hangzhou.aliyuncs.com",
            'ap-northeast-1': "mt.aliyuncs.com",
            'ap-northeast-2-pop': "mt.aliyuncs.com",
            'ap-south-1': "mt.aliyuncs.com",
            'ap-southeast-1': "mt.ap-southeast-1.aliyuncs.com",
            'ap-southeast-2': "mt.aliyuncs.com",
            'ap-southeast-3': "mt.aliyuncs.com",
            'ap-southeast-5': "mt.aliyuncs.com",
            'cn-beijing': "mt.aliyuncs.com",
            'cn-beijing-finance-1': "mt.aliyuncs.com",
            'cn-beijing-finance-pop': "mt.aliyuncs.com",
            'cn-beijing-gov-1': "mt.aliyuncs.com",
            'cn-beijing-nu16-b01': "mt.aliyuncs.com",
            'cn-chengdu': "mt.aliyuncs.com",
            'cn-edge-1': "mt.aliyuncs.com",
            'cn-fujian': "mt.aliyuncs.com",
            'cn-haidian-cm12-c01': "mt.aliyuncs.com",
            'cn-hangzhou-bj-b01': "mt.aliyuncs.com",
            'cn-hangzhou-finance': "mt.aliyuncs.com",
            'cn-hangzhou-internal-prod-1': "mt.aliyuncs.com",
            'cn-hangzhou-internal-test-1': "mt.aliyuncs.com",
            'cn-hangzhou-internal-test-2': "mt.aliyuncs.com",
            'cn-hangzhou-internal-test-3': "mt.aliyuncs.com",
            'cn-hangzhou-test-306': "mt.aliyuncs.com",
            'cn-hongkong': "mt.aliyuncs.com",
            'cn-hongkong-finance-pop': "mt.aliyuncs.com",
            'cn-huhehaote': "mt.aliyuncs.com",
            'cn-north-2-gov-1': "mt.aliyuncs.com",
            'cn-qingdao': "mt.aliyuncs.com",
            'cn-qingdao-nebula': "mt.aliyuncs.com",
            'cn-shanghai': "mt.aliyuncs.com",
            'cn-shanghai-et15-b01': "mt.aliyuncs.com",
            'cn-shanghai-et2-b01': "mt.aliyuncs.com",
            'cn-shanghai-finance-1': "mt.aliyuncs.com",
            'cn-shanghai-inner': "mt.aliyuncs.com",
            'cn-shanghai-internal-test-1': "mt.aliyuncs.com",
            'cn-shenzhen': "mt.aliyuncs.com",
            'cn-shenzhen-finance-1': "mt.aliyuncs.com",
            'cn-shenzhen-inner': "mt.aliyuncs.com",
            'cn-shenzhen-st4-d01': "mt.aliyuncs.com",
            'cn-shenzhen-su18-b01': "mt.aliyuncs.com",
            'cn-wuhan': "mt.aliyuncs.com",
            'cn-yushanfang': "mt.aliyuncs.com",
            'cn-zhangbei-na61-b01': "mt.aliyuncs.com",
            'cn-zhangjiakou': "mt.aliyuncs.com",
            'cn-zhangjiakou-na62-a01': "mt.aliyuncs.com",
            'cn-zhengzhou-nebula-1': "mt.aliyuncs.com",
            'eu-central-1': "mt.aliyuncs.com",
            'eu-west-1': "mt.aliyuncs.com",
            'eu-west-1-oxs': "mt.aliyuncs.com",
            'me-east-1': "mt.aliyuncs.com",
            'rus-west-1-pop': "mt.aliyuncs.com",
            'us-east-1': "mt.aliyuncs.com",
            'us-west-1': "mt.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("alimt", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request CreateAsyncTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAsyncTranslateResponse
     */
    async createAsyncTranslateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiType)) {
            body["ApiType"] = request.apiType;
        }
        if (!tea_util_1.default.isUnset(request.formatType)) {
            body["FormatType"] = request.formatType;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateAsyncTranslate",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateAsyncTranslateResponse({}));
    }
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request CreateAsyncTranslateRequest
     * @return CreateAsyncTranslateResponse
     */
    async createAsyncTranslate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createAsyncTranslateWithOptions(request, runtime);
    }
    /**
     * @param request CreateDocTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDocTranslateTaskResponse
     */
    async createDocTranslateTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackUrl)) {
            body["CallbackUrl"] = request.callbackUrl;
        }
        if (!tea_util_1.default.isUnset(request.clientToken)) {
            body["ClientToken"] = request.clientToken;
        }
        if (!tea_util_1.default.isUnset(request.fileUrl)) {
            body["FileUrl"] = request.fileUrl;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateDocTranslateTask",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateDocTranslateTaskResponse({}));
    }
    /**
     * @param request CreateDocTranslateTaskRequest
     * @return CreateDocTranslateTaskResponse
     */
    async createDocTranslateTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createDocTranslateTaskWithOptions(request, runtime);
    }
    async createDocTranslateTaskAdvance(request, runtime) {
        // Step 0: init client
        let accessKeyId = await this._credential.getAccessKeyId();
        let accessKeySecret = await this._credential.getAccessKeySecret();
        let securityToken = await this._credential.getSecurityToken();
        let credentialType = this._credential.getType();
        let openPlatformEndpoint = this._openPlatformEndpoint;
        if (tea_util_1.default.empty(openPlatformEndpoint)) {
            openPlatformEndpoint = "openplatform.aliyuncs.com";
        }
        if (tea_util_1.default.isUnset(credentialType)) {
            credentialType = "access_key";
        }
        let authConfig = new $OpenApi.Config({
            accessKeyId: accessKeyId,
            accessKeySecret: accessKeySecret,
            securityToken: securityToken,
            type: credentialType,
            endpoint: openPlatformEndpoint,
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let authClient = new openplatform20191219_1.default(authConfig);
        let authRequest = new $OpenPlatform.AuthorizeFileUploadRequest({
            product: "alimt",
            regionId: this._regionId,
        });
        let authResponse = new $OpenPlatform.AuthorizeFileUploadResponse({});
        let ossConfig = new $OSS.Config({
            accessKeyId: accessKeyId,
            accessKeySecret: accessKeySecret,
            type: "access_key",
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let ossClient = new oss_client_1.default(ossConfig);
        let fileObj = new $FileForm.FileField({});
        let ossHeader = new $OSS.PostObjectRequestHeader({});
        let uploadRequest = new $OSS.PostObjectRequest({});
        let ossRuntime = new $OSSUtil.RuntimeOptions({});
        openapi_util_1.default.convert(runtime, ossRuntime);
        let createDocTranslateTaskReq = new CreateDocTranslateTaskRequest({});
        openapi_util_1.default.convert(request, createDocTranslateTaskReq);
        if (!tea_util_1.default.isUnset(request.fileUrlObject)) {
            authResponse = await authClient.authorizeFileUploadWithOptions(authRequest, runtime);
            ossConfig.accessKeyId = authResponse.body.accessKeyId;
            ossConfig.endpoint = openapi_util_1.default.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, this._endpointType);
            ossClient = new oss_client_1.default(ossConfig);
            fileObj = new $FileForm.FileField({
                filename: authResponse.body.objectKey,
                content: request.fileUrlObject,
                contentType: "",
            });
            ossHeader = new $OSS.PostObjectRequestHeader({
                accessKeyId: authResponse.body.accessKeyId,
                policy: authResponse.body.encodedPolicy,
                signature: authResponse.body.signature,
                key: authResponse.body.objectKey,
                file: fileObj,
                successActionStatus: "201",
            });
            uploadRequest = new $OSS.PostObjectRequest({
                bucketName: authResponse.body.bucket,
                header: ossHeader,
            });
            await ossClient.postObject(uploadRequest, ossRuntime);
            createDocTranslateTaskReq.fileUrl = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
        }
        let createDocTranslateTaskResp = await this.createDocTranslateTaskWithOptions(createDocTranslateTaskReq, runtime);
        return createDocTranslateTaskResp;
    }
    /**
     * @param request CreateImageTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateImageTranslateTaskResponse
     */
    async createImageTranslateTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.clientToken)) {
            body["ClientToken"] = request.clientToken;
        }
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["Extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        if (!tea_util_1.default.isUnset(request.urlList)) {
            body["UrlList"] = request.urlList;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateImageTranslateTask",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateImageTranslateTaskResponse({}));
    }
    /**
     * @param request CreateImageTranslateTaskRequest
     * @return CreateImageTranslateTaskResponse
     */
    async createImageTranslateTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createImageTranslateTaskWithOptions(request, runtime);
    }
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request GetAsyncTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAsyncTranslateResponse
     */
    async getAsyncTranslateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.jobId)) {
            body["JobId"] = request.jobId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetAsyncTranslate",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetAsyncTranslateResponse({}));
    }
    /**
     * @summary 大文本异步翻译，支持5000-50000字翻译
     *
     * @param request GetAsyncTranslateRequest
     * @return GetAsyncTranslateResponse
     */
    async getAsyncTranslate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getAsyncTranslateWithOptions(request, runtime);
    }
    /**
     * @param request GetBatchTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBatchTranslateResponse
     */
    async getBatchTranslateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiType)) {
            body["ApiType"] = request.apiType;
        }
        if (!tea_util_1.default.isUnset(request.formatType)) {
            body["FormatType"] = request.formatType;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetBatchTranslate",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetBatchTranslateResponse({}));
    }
    /**
     * @param request GetBatchTranslateRequest
     * @return GetBatchTranslateResponse
     */
    async getBatchTranslate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getBatchTranslateWithOptions(request, runtime);
    }
    /**
     * @summary GetBatchTranslateByVPC
     *
     * @param request GetBatchTranslateByVPCRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBatchTranslateByVPCResponse
     */
    async getBatchTranslateByVPCWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiType)) {
            body["ApiType"] = request.apiType;
        }
        if (!tea_util_1.default.isUnset(request.formatType)) {
            body["FormatType"] = request.formatType;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetBatchTranslateByVPC",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetBatchTranslateByVPCResponse({}));
    }
    /**
     * @summary GetBatchTranslateByVPC
     *
     * @param request GetBatchTranslateByVPCRequest
     * @return GetBatchTranslateByVPCResponse
     */
    async getBatchTranslateByVPC(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getBatchTranslateByVPCWithOptions(request, runtime);
    }
    /**
     * @summary 语种识别
     *
     * @param request GetDetectLanguageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDetectLanguageResponse
     */
    async getDetectLanguageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDetectLanguage",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDetectLanguageResponse({}));
    }
    /**
     * @summary 语种识别
     *
     * @param request GetDetectLanguageRequest
     * @return GetDetectLanguageResponse
     */
    async getDetectLanguage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDetectLanguageWithOptions(request, runtime);
    }
    /**
     * @param request GetDocTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDocTranslateTaskResponse
     */
    async getDocTranslateTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDocTranslateTask",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetDocTranslateTaskResponse({}));
    }
    /**
     * @param request GetDocTranslateTaskRequest
     * @return GetDocTranslateTaskResponse
     */
    async getDocTranslateTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getDocTranslateTaskWithOptions(request, runtime);
    }
    /**
     * @param request GetImageDiagnoseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageDiagnoseResponse
     */
    async getImageDiagnoseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["Extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            body["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetImageDiagnose",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetImageDiagnoseResponse({}));
    }
    /**
     * @param request GetImageDiagnoseRequest
     * @return GetImageDiagnoseResponse
     */
    async getImageDiagnose(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getImageDiagnoseWithOptions(request, runtime);
    }
    /**
     * @param request GetImageTranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageTranslateResponse
     */
    async getImageTranslateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["Extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            body["Url"] = request.url;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetImageTranslate",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetImageTranslateResponse({}));
    }
    /**
     * @param request GetImageTranslateRequest
     * @return GetImageTranslateResponse
     */
    async getImageTranslate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getImageTranslateWithOptions(request, runtime);
    }
    /**
     * @param request GetImageTranslateTaskRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetImageTranslateTaskResponse
     */
    async getImageTranslateTaskWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["TaskId"] = request.taskId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetImageTranslateTask",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetImageTranslateTaskResponse({}));
    }
    /**
     * @param request GetImageTranslateTaskRequest
     * @return GetImageTranslateTaskResponse
     */
    async getImageTranslateTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getImageTranslateTaskWithOptions(request, runtime);
    }
    /**
     * @param request GetTitleDiagnoseRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTitleDiagnoseResponse
     */
    async getTitleDiagnoseWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryId)) {
            body["CategoryId"] = request.categoryId;
        }
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["Extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["Language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["Platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["Title"] = request.title;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTitleDiagnose",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTitleDiagnoseResponse({}));
    }
    /**
     * @param request GetTitleDiagnoseRequest
     * @return GetTitleDiagnoseResponse
     */
    async getTitleDiagnose(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTitleDiagnoseWithOptions(request, runtime);
    }
    /**
     * @param request GetTitleGenerateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTitleGenerateResponse
     */
    async getTitleGenerateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["Attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.categoryId)) {
            body["CategoryId"] = request.categoryId;
        }
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["Extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.hotWords)) {
            body["HotWords"] = request.hotWords;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["Language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["Platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["Title"] = request.title;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTitleGenerate",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTitleGenerateResponse({}));
    }
    /**
     * @param request GetTitleGenerateRequest
     * @return GetTitleGenerateResponse
     */
    async getTitleGenerate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTitleGenerateWithOptions(request, runtime);
    }
    /**
     * @param request GetTitleIntelligenceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTitleIntelligenceResponse
     */
    async getTitleIntelligenceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.catLevelThreeId)) {
            body["CatLevelThreeId"] = request.catLevelThreeId;
        }
        if (!tea_util_1.default.isUnset(request.catLevelTwoId)) {
            body["CatLevelTwoId"] = request.catLevelTwoId;
        }
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["Extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.keywords)) {
            body["Keywords"] = request.keywords;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["Platform"] = request.platform;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTitleIntelligence",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTitleIntelligenceResponse({}));
    }
    /**
     * @param request GetTitleIntelligenceRequest
     * @return GetTitleIntelligenceResponse
     */
    async getTitleIntelligence(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTitleIntelligenceWithOptions(request, runtime);
    }
    /**
     * @summary 获取图片批量翻译结果
     *
     * @param request GetTranslateImageBatchResultRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTranslateImageBatchResultResponse
     */
    async getTranslateImageBatchResultWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["TaskId"] = request.taskId;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTranslateImageBatchResult",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTranslateImageBatchResultResponse({}));
    }
    /**
     * @summary 获取图片批量翻译结果
     *
     * @param request GetTranslateImageBatchResultRequest
     * @return GetTranslateImageBatchResultResponse
     */
    async getTranslateImageBatchResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTranslateImageBatchResultWithOptions(request, runtime);
    }
    /**
     * @param request GetTranslateReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTranslateReportResponse
     */
    async getTranslateReportWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.apiName)) {
            query["ApiName"] = request.apiName;
        }
        if (!tea_util_1.default.isUnset(request.beginTime)) {
            query["BeginTime"] = request.beginTime;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["EndTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.group)) {
            query["Group"] = request.group;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTranslateReport",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GetTranslateReportResponse({}));
    }
    /**
     * @param request GetTranslateReportRequest
     * @return GetTranslateReportResponse
     */
    async getTranslateReport(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.getTranslateReportWithOptions(request, runtime);
    }
    /**
     * @summary 开通服务
     *
     * @param request OpenAlimtServiceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return OpenAlimtServiceResponse
     */
    async openAlimtServiceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ownerId)) {
            query["OwnerId"] = request.ownerId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["Type"] = request.type;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OpenAlimtService",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new OpenAlimtServiceResponse({}));
    }
    /**
     * @summary 开通服务
     *
     * @param request OpenAlimtServiceRequest
     * @return OpenAlimtServiceResponse
     */
    async openAlimtService(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.openAlimtServiceWithOptions(request, runtime);
    }
    /**
     * @param request TranslateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateResponse
     */
    async translateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.context)) {
            query["Context"] = request.context;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.formatType)) {
            body["FormatType"] = request.formatType;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Translate",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TranslateResponse({}));
    }
    /**
     * @param request TranslateRequest
     * @return TranslateResponse
     */
    async translate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.translateWithOptions(request, runtime);
    }
    /**
     * @param request TranslateCertificateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateCertificateResponse
     */
    async translateCertificateWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.certificateType)) {
            body["CertificateType"] = request.certificateType;
        }
        if (!tea_util_1.default.isUnset(request.imageUrl)) {
            body["ImageUrl"] = request.imageUrl;
        }
        if (!tea_util_1.default.isUnset(request.resultType)) {
            body["ResultType"] = request.resultType;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TranslateCertificate",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TranslateCertificateResponse({}));
    }
    /**
     * @param request TranslateCertificateRequest
     * @return TranslateCertificateResponse
     */
    async translateCertificate(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.translateCertificateWithOptions(request, runtime);
    }
    async translateCertificateAdvance(request, runtime) {
        // Step 0: init client
        let accessKeyId = await this._credential.getAccessKeyId();
        let accessKeySecret = await this._credential.getAccessKeySecret();
        let securityToken = await this._credential.getSecurityToken();
        let credentialType = this._credential.getType();
        let openPlatformEndpoint = this._openPlatformEndpoint;
        if (tea_util_1.default.empty(openPlatformEndpoint)) {
            openPlatformEndpoint = "openplatform.aliyuncs.com";
        }
        if (tea_util_1.default.isUnset(credentialType)) {
            credentialType = "access_key";
        }
        let authConfig = new $OpenApi.Config({
            accessKeyId: accessKeyId,
            accessKeySecret: accessKeySecret,
            securityToken: securityToken,
            type: credentialType,
            endpoint: openPlatformEndpoint,
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let authClient = new openplatform20191219_1.default(authConfig);
        let authRequest = new $OpenPlatform.AuthorizeFileUploadRequest({
            product: "alimt",
            regionId: this._regionId,
        });
        let authResponse = new $OpenPlatform.AuthorizeFileUploadResponse({});
        let ossConfig = new $OSS.Config({
            accessKeyId: accessKeyId,
            accessKeySecret: accessKeySecret,
            type: "access_key",
            protocol: this._protocol,
            regionId: this._regionId,
        });
        let ossClient = new oss_client_1.default(ossConfig);
        let fileObj = new $FileForm.FileField({});
        let ossHeader = new $OSS.PostObjectRequestHeader({});
        let uploadRequest = new $OSS.PostObjectRequest({});
        let ossRuntime = new $OSSUtil.RuntimeOptions({});
        openapi_util_1.default.convert(runtime, ossRuntime);
        let translateCertificateReq = new TranslateCertificateRequest({});
        openapi_util_1.default.convert(request, translateCertificateReq);
        if (!tea_util_1.default.isUnset(request.imageUrlObject)) {
            authResponse = await authClient.authorizeFileUploadWithOptions(authRequest, runtime);
            ossConfig.accessKeyId = authResponse.body.accessKeyId;
            ossConfig.endpoint = openapi_util_1.default.getEndpoint(authResponse.body.endpoint, authResponse.body.useAccelerate, this._endpointType);
            ossClient = new oss_client_1.default(ossConfig);
            fileObj = new $FileForm.FileField({
                filename: authResponse.body.objectKey,
                content: request.imageUrlObject,
                contentType: "",
            });
            ossHeader = new $OSS.PostObjectRequestHeader({
                accessKeyId: authResponse.body.accessKeyId,
                policy: authResponse.body.encodedPolicy,
                signature: authResponse.body.signature,
                key: authResponse.body.objectKey,
                file: fileObj,
                successActionStatus: "201",
            });
            uploadRequest = new $OSS.PostObjectRequest({
                bucketName: authResponse.body.bucket,
                header: ossHeader,
            });
            await ossClient.postObject(uploadRequest, ossRuntime);
            translateCertificateReq.imageUrl = `http://${authResponse.body.bucket}.${authResponse.body.endpoint}/${authResponse.body.objectKey}`;
        }
        let translateCertificateResp = await this.translateCertificateWithOptions(translateCertificateReq, runtime);
        return translateCertificateResp;
    }
    /**
     * @deprecated OpenAPI TranslateECommerce is deprecated, please use alimt::2018-10-12::Translate instead.
     *
     * @param request TranslateECommerceRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateECommerceResponse
     */
    // Deprecated
    async translateECommerceWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.context)) {
            query["Context"] = request.context;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.formatType)) {
            body["FormatType"] = request.formatType;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TranslateECommerce",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TranslateECommerceResponse({}));
    }
    /**
     * @deprecated OpenAPI TranslateECommerce is deprecated, please use alimt::2018-10-12::Translate instead.
     *
     * @param request TranslateECommerceRequest
     * @return TranslateECommerceResponse
     */
    // Deprecated
    async translateECommerce(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.translateECommerceWithOptions(request, runtime);
    }
    /**
     * @param request TranslateGeneralRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateGeneralResponse
     */
    async translateGeneralWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.context)) {
            query["Context"] = request.context;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.formatType)) {
            body["FormatType"] = request.formatType;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TranslateGeneral",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TranslateGeneralResponse({}));
    }
    /**
     * @param request TranslateGeneralRequest
     * @return TranslateGeneralResponse
     */
    async translateGeneral(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.translateGeneralWithOptions(request, runtime);
    }
    /**
     * @summary TranslateGeneralVpc
     *
     * @param request TranslateGeneralVpcRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateGeneralVpcResponse
     */
    async translateGeneralVpcWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.context)) {
            query["Context"] = request.context;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.formatType)) {
            body["FormatType"] = request.formatType;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["Scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.sourceText)) {
            body["SourceText"] = request.sourceText;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TranslateGeneralVpc",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TranslateGeneralVpcResponse({}));
    }
    /**
     * @summary TranslateGeneralVpc
     *
     * @param request TranslateGeneralVpcRequest
     * @return TranslateGeneralVpcResponse
     */
    async translateGeneralVpc(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.translateGeneralVpcWithOptions(request, runtime);
    }
    /**
     * @summary 公有云图片翻译产品API
     *
     * @param request TranslateImageRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateImageResponse
     */
    async translateImageWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["Ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.field)) {
            body["Field"] = request.field;
        }
        if (!tea_util_1.default.isUnset(request.imageBase64)) {
            body["ImageBase64"] = request.imageBase64;
        }
        if (!tea_util_1.default.isUnset(request.imageUrl)) {
            body["ImageUrl"] = request.imageUrl;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TranslateImage",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TranslateImageResponse({}));
    }
    /**
     * @summary 公有云图片翻译产品API
     *
     * @param request TranslateImageRequest
     * @return TranslateImageResponse
     */
    async translateImage(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.translateImageWithOptions(request, runtime);
    }
    /**
     * @summary 批量图片翻译接口
     *
     * @param request TranslateImageBatchRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TranslateImageBatchResponse
     */
    async translateImageBatchWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.customTaskId)) {
            body["CustomTaskId"] = request.customTaskId;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["Ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.field)) {
            body["Field"] = request.field;
        }
        if (!tea_util_1.default.isUnset(request.imageUrls)) {
            body["ImageUrls"] = request.imageUrls;
        }
        if (!tea_util_1.default.isUnset(request.sourceLanguage)) {
            body["SourceLanguage"] = request.sourceLanguage;
        }
        if (!tea_util_1.default.isUnset(request.targetLanguage)) {
            body["TargetLanguage"] = request.targetLanguage;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TranslateImageBatch",
            version: "2018-10-12",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new TranslateImageBatchResponse({}));
    }
    /**
     * @summary 批量图片翻译接口
     *
     * @param request TranslateImageBatchRequest
     * @return TranslateImageBatchResponse
     */
    async translateImageBatch(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.translateImageBatchWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map